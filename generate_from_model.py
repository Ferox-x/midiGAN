import glob
import json
import uuid

import numpy as np
from music21 import converter, instrument, note, chord, stream
from tensorflow.keras.models import load_model

from tensorflow.keras.utils import to_categorical


def generate_midi_from_network():
    """Train a Neural Network to generate music"""
    notes = load_nodes()

    # Get the number of pitch names
    n_vocab = len(set(notes))

    model = load_model("LSTMmodel.h5")

    for _ in range(10):
        network_input, network_output = prepare_sequences(notes, n_vocab)

        prediction_output = generate_notes(model, notes, network_input, len(set(notes)))
        file_name = str(uuid.uuid4())
        create_midi(prediction_output, f"generated/{file_name}")
        print(f"Generated {file_name} {_ + 1} / 10")


def get_notes():
    """Get all the notes and chords from the midi files"""
    notes = []

    for file in glob.glob("midi/*.mid"):
        midi = converter.parse(file)

        print("Parsing %s" % file)

        try:  # file has instrument parts
            s2 = instrument.partitionByInstrument(midi)
            notes_to_parse = s2.parts[0].recurse()
        except:  # file has notes in a flat structure
            notes_to_parse = midi.flat.notes

        for element in notes_to_parse:
            if isinstance(element, note.Note):
                notes.append(str(element.pitch))
            elif isinstance(element, chord.Chord):
                notes.append(".".join(str(n) for n in element.normalOrder))

    return notes


def prepare_sequences(notes, n_vocab):
    """Prepare the sequences used by the Neural Network"""
    sequence_length = 100

    # get all pitch names
    pitchnames = sorted(set(item for item in notes))

    # create a dictionary to map pitches to integers
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    network_input = []
    network_output = []

    # create input sequences and the corresponding outputs
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i : i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        network_output.append(note_to_int[sequence_out])

    # reshape the input into a format compatible with LSTM layers
    n_patterns = len(network_input)
    network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))

    # normalize input between 0 and 1
    network_input = network_input / float(n_vocab)

    network_output = to_categorical(network_output)

    return network_input, network_output


def generate_notes(model, notes, network_input, n_vocab):
    """Generate notes from the neural network based on a sequence of notes"""
    # pick a random sequence from the input as a starting point for the prediction
    pitchnames = sorted(set(item for item in notes))

    start = np.random.randint(0, len(network_input) - 1)
    print(start)
    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    for note_index in range(100):
        prediction_input = np.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)
        prediction = model.predict(prediction_input, verbose=0)
        index = np.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)

        pattern = np.append(pattern, index)
        pattern = pattern[1 : len(pattern)]
    return prediction_output


def create_midi(prediction_output, filename):
    """convert the output from the prediction to notes and create a midi file
    from the notes"""
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ("." in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split(".")
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)
        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    midi_stream.write("midi", fp="{}.mid".format(filename))


def dump_nodes():
    with open("nodes.json", "w") as file:
        file.write(json.dumps(get_notes()))


def load_nodes():
    with open("nodes.json", "r") as file:
        data = file.read()
        return json.loads(data)


if __name__ == "__main__":
    generate_midi_from_network()
